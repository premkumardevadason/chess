{"version":3,"file":"websocket-ChVyU63F.js","sources":["../../node_modules/@stomp/stompjs/esm6/augment-websocket.js","../../node_modules/@stomp/stompjs/esm6/byte.js","../../node_modules/@stomp/stompjs/esm6/frame-impl.js","../../node_modules/@stomp/stompjs/esm6/parser.js","../../node_modules/@stomp/stompjs/esm6/types.js","../../node_modules/@stomp/stompjs/esm6/ticker.js","../../node_modules/@stomp/stompjs/esm6/versions.js","../../node_modules/@stomp/stompjs/esm6/stomp-handler.js","../../node_modules/@stomp/stompjs/esm6/client.js"],"sourcesContent":["/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const id = Math.random().toString().substring(2, 8); // A simulated id\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose?.call(webSocket, {\n            code: 4001,\n            reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map","/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map","import { BYTE } from './byte.js';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        // At this stage it will definitely have a valid value\n        return this._binaryBody;\n    }\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map","/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (typeof segment === 'string') {\n            chunk = this._encoder.encode(segment);\n        }\n        else {\n            chunk = new Uint8Array(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([\n                this._headerKey,\n                this._consumeTokenAsUTF8(),\n            ]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        try {\n            this.onFrame(this._results);\n        }\n        catch (e) {\n            console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n        }\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map","/**\n * Possible states for the IStompSocket\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nexport var ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState || (ActivationState = {}));\n/**\n * Possible reconnection wait time modes\n */\nexport var ReconnectionTimeMode;\n(function (ReconnectionTimeMode) {\n    ReconnectionTimeMode[ReconnectionTimeMode[\"LINEAR\"] = 0] = \"LINEAR\";\n    ReconnectionTimeMode[ReconnectionTimeMode[\"EXPONENTIAL\"] = 1] = \"EXPONENTIAL\";\n})(ReconnectionTimeMode || (ReconnectionTimeMode = {}));\n/**\n * Possible ticker strategies for outgoing heartbeat ping\n */\nexport var TickerStrategy;\n(function (TickerStrategy) {\n    TickerStrategy[\"Interval\"] = \"interval\";\n    TickerStrategy[\"Worker\"] = \"worker\";\n})(TickerStrategy || (TickerStrategy = {}));\n//# sourceMappingURL=types.js.map","import { TickerStrategy } from './types.js';\nexport class Ticker {\n    constructor(_interval, _strategy = TickerStrategy.Interval, _debug) {\n        this._interval = _interval;\n        this._strategy = _strategy;\n        this._debug = _debug;\n        this._workerScript = `\n    var startTime = Date.now();\n    setInterval(function() {\n        self.postMessage(Date.now() - startTime);\n    }, ${this._interval});\n  `;\n    }\n    start(tick) {\n        this.stop();\n        if (this.shouldUseWorker()) {\n            this.runWorker(tick);\n        }\n        else {\n            this.runInterval(tick);\n        }\n    }\n    stop() {\n        this.disposeWorker();\n        this.disposeInterval();\n    }\n    shouldUseWorker() {\n        return typeof (Worker) !== 'undefined' && this._strategy === TickerStrategy.Worker;\n    }\n    runWorker(tick) {\n        this._debug('Using runWorker for outgoing pings');\n        if (!this._worker) {\n            this._worker = new Worker(URL.createObjectURL(new Blob([this._workerScript], { type: 'text/javascript' })));\n            this._worker.onmessage = (message) => tick(message.data);\n        }\n    }\n    runInterval(tick) {\n        this._debug('Using runInterval for outgoing pings');\n        if (!this._timer) {\n            const startTime = Date.now();\n            this._timer = setInterval(() => {\n                tick(Date.now() - startTime);\n            }, this._interval);\n        }\n    }\n    disposeWorker() {\n        if (this._worker) {\n            this._worker.terminate();\n            delete this._worker;\n            this._debug('Outgoing ping disposeWorker');\n        }\n    }\n    disposeInterval() {\n        if (this._timer) {\n            clearInterval(this._timer);\n            delete this._timer;\n            this._debug('Outgoing ping disposeInterval');\n        }\n    }\n}\n//# sourceMappingURL=ticker.js.map","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n    /**\n     * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\n     *\n     * You will be creating an instance of this class if you want to override\n     * supported versions to be declared during STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n]);\n//# sourceMappingURL=versions.js.map","import { augmentWebsocket } from './augment-websocket.js';\nimport { BYTE } from './byte.js';\nimport { FrameImpl } from './frame-impl.js';\nimport { Parser } from './parser.js';\nimport { Ticker } from './ticker.js';\nimport { StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    constructor(_client, _webSocket, config) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._connected = false;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](https://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.debug = config.debug;\n        this.stompVersions = config.stompVersions;\n        this.connectHeaders = config.connectHeaders;\n        this.disconnectHeaders = config.disconnectHeaders;\n        this.heartbeatIncoming = config.heartbeatIncoming;\n        this.heartbeatOutgoing = config.heartbeatOutgoing;\n        this.splitLargeFrames = config.splitLargeFrames;\n        this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n        this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n        this.logRawCommunication = config.logRawCommunication;\n        this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n        this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n        this.onConnect = config.onConnect;\n        this.onDisconnect = config.onDisconnect;\n        this.onStompError = config.onStompError;\n        this.onWebSocketClose = config.onWebSocketClose;\n        this.onWebSocketError = config.onWebSocketError;\n        this.onUnhandledMessage = config.onUnhandledMessage;\n        this.onUnhandledReceipt = config.onUnhandledReceipt;\n        this.onUnhandledFrame = config.onUnhandledFrame;\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._webSocket.onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._webSocket.url}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = new Ticker(ttl, this._client.heartbeatStrategy, this.debug);\n            this._pinger.start(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            });\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this.discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    discardWebsocket() {\n        if (typeof this._webSocket.terminate !== 'function') {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        // @ts-ignore - this method will be there at this stage\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            this._pinger.stop();\n            this._pinger = undefined;\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n            this._ponger = undefined;\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map","import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, ReconnectionTimeMode, StompSocketState, TickerStrategy, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler?._webSocket;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is an active connection to STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.1 and 1.0\n         *        client.stompVersions = new Versions(['1.1', '1.0'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which switches off automatic reconnection.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * tracking the time to the next reconnection. Initialized to [Client#reconnectDelay]{@link Client#reconnectDelay}'s value and it may\n         * change depending on the [Client#reconnectTimeMode]{@link Client#reconnectTimeMode} setting\n         */\n        this._nextReconnectDelay = 0;\n        /**\n         * Maximum time to wait between reconnects, in milliseconds. Defaults to 15 minutes.\n         * Only relevant when [Client#reconnectTimeMode]{@link Client#reconnectTimeMode} not LINEAR (e.g., EXPONENTIAL).\n         * Set to 0 for no limit on wait time.\n         */\n        this.maxReconnectDelay = 15 * 60 * 1000; // 15 minutes in ms\n        /**\n         * Reconnection wait time mode, either linear (default) or exponential.\n         * Note: See [Client#maxReconnectDelay]{@link Client#maxReconnectDelay} for setting the maximum delay when exponential\n         *\n         * ```javascript\n         * client.configure({\n         *   reconnectTimeMode: ReconnectionTimeMode.EXPONENTIAL,\n         *   reconnectDelay: 200, // It will wait 200, 400, 800 ms...\n         *   maxReconnectDelay: 10000, // Optional, when provided, it will not wait more that these ms\n         * })\n         * ```\n         */\n        this.reconnectTimeMode = ReconnectionTimeMode.LINEAR;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * Outgoing heartbeat strategy.\n         * See https://github.com/stomp-js/stompjs/pull/579\n         *\n         * Can be worker or interval strategy, but will always use `interval`\n         * if web workers are unavailable, for example, in a non-browser environment.\n         *\n         * Using Web Workers may work better on long-running pages\n         * and mobile apps, as the browser may suspend Timers in the main page.\n         * Try the `Worker` mode if you discover disconnects when the browser tab is in the background.\n         *\n         * When used in a JS environment, use 'worker' or 'interval' as valid values.\n         *\n         * Defaults to `interval` strategy.\n         */\n        this.heartbeatStrategy = TickerStrategy.Interval;\n        /**\n         * This switches on a non-standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seem to support this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Setting it for such a broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Browsers do not immediately close WebSockets when `.close` is issued.\n         * This may cause reconnection to take a significantly long time in case\n         *  of some types of failures.\n         * In case of incoming heartbeat failure, this experimental flag instructs\n         * the library to discard the socket immediately\n         * (even before it is actually closed).\n         */\n        this.discardWebsocketOnCommFailure = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // No op callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n        // Warn on incorrect maxReconnectDelay settings\n        if (this.maxReconnectDelay > 0 &&\n            this.maxReconnectDelay < this.reconnectDelay) {\n            this.debug(`Warning: maxReconnectDelay (${this.maxReconnectDelay}ms) is less than reconnectDelay (${this.reconnectDelay}ms). Using reconnectDelay as the maxReconnectDelay delay.`);\n            this.maxReconnectDelay = this.reconnectDelay;\n        }\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect. If the [Client#reconnectTimeMode]{@link Client#reconnectTimeMode}\n     * is set to EXPONENTIAL it will increase the wait time exponentially\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        const _activate = () => {\n            if (this.active) {\n                this.debug('Already ACTIVE, ignoring request to activate');\n                return;\n            }\n            this._changeState(ActivationState.ACTIVE);\n            this._nextReconnectDelay = this.reconnectDelay;\n            this._connect();\n        };\n        // if it is deactivating, wait for it to complete before activating.\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Waiting for deactivation to finish before activating');\n            this.deactivate().then(() => {\n                _activate();\n            });\n        }\n        else {\n            _activate();\n        }\n    }\n    async _connect() {\n        await this.beforeConnect(this);\n        if (this._stompHandler) {\n            this.debug('There is already a stompHandler, skipping the call to connect');\n            return;\n        }\n        if (!this.active) {\n            this.debug('Client has been marked inactive, will not attempt to connect');\n            return;\n        }\n        // setup connection watcher\n        if (this.connectionTimeout > 0) {\n            // clear first\n            if (this._connectionWatcher) {\n                clearTimeout(this._connectionWatcher);\n            }\n            this._connectionWatcher = setTimeout(() => {\n                if (this.connected) {\n                    return;\n                }\n                // Connection not established, close the underlying socket\n                // a reconnection will be attempted\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                this.forceDisconnect();\n            }, this.connectionTimeout);\n        }\n        this.debug('Opening Web Socket...');\n        // Get the actual WebSocket (or a similar object)\n        const webSocket = this._createWebSocket();\n        this._stompHandler = new StompHandler(this, webSocket, {\n            debug: this.debug,\n            stompVersions: this.stompVersions,\n            connectHeaders: this.connectHeaders,\n            disconnectHeaders: this._disconnectHeaders,\n            heartbeatIncoming: this.heartbeatIncoming,\n            heartbeatOutgoing: this.heartbeatOutgoing,\n            heartbeatStrategy: this.heartbeatStrategy,\n            splitLargeFrames: this.splitLargeFrames,\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\n            logRawCommunication: this.logRawCommunication,\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n            onConnect: frame => {\n                // Successfully connected, stop the connection watcher\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                    this._connectionWatcher = undefined;\n                }\n                if (!this.active) {\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    this._disposeStompHandler();\n                    return;\n                }\n                this.onConnect(frame);\n            },\n            onDisconnect: frame => {\n                this.onDisconnect(frame);\n            },\n            onStompError: frame => {\n                this.onStompError(frame);\n            },\n            onWebSocketClose: evt => {\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                if (this.state === ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    this._changeState(ActivationState.INACTIVE);\n                }\n                // The callback is called before attempting to reconnect, this would allow the client\n                // to be `deactivated` in the callback.\n                this.onWebSocketClose(evt);\n                if (this.active) {\n                    this._schedule_reconnect();\n                }\n            },\n            onWebSocketError: evt => {\n                this.onWebSocketError(evt);\n            },\n            onUnhandledMessage: message => {\n                this.onUnhandledMessage(message);\n            },\n            onUnhandledReceipt: frame => {\n                this.onUnhandledReceipt(frame);\n            },\n            onUnhandledFrame: frame => {\n                this.onUnhandledFrame(frame);\n            },\n        });\n        this._stompHandler.start();\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else if (this.brokerURL) {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        else {\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this._nextReconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this._nextReconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                if (this.reconnectTimeMode === ReconnectionTimeMode.EXPONENTIAL) {\n                    this._nextReconnectDelay = this._nextReconnectDelay * 2;\n                    // Truncated exponential backoff with a set limit unless disabled\n                    if (this.maxReconnectDelay !== 0) {\n                        this._nextReconnectDelay = Math.min(this._nextReconnectDelay, this.maxReconnectDelay);\n                    }\n                }\n                this._connect();\n            }, this._nextReconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * It is not an error to invoke this method more than once.\n     * Each of those would resolve on completion of deactivation.\n     *\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\n     *\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\n     * In some cases, browsers take a long time in the Websocket shutdown\n     * if the underlying connection had gone stale.\n     * Using this mode can speed up.\n     * When this mode is used, the actual Websocket may linger for a while\n     * and the broker may not realize that the connection is no longer in use.\n     *\n     * It is possible to invoke this method initially without the `force` option\n     * and subsequently, say after a wait, with the `force` option.\n     */\n    async deactivate(options = {}) {\n        const force = options.force || false;\n        const needToDispose = this.active;\n        let retPromise;\n        if (this.state === ActivationState.INACTIVE) {\n            this.debug(`Already INACTIVE, nothing more to do`);\n            return Promise.resolve();\n        }\n        this._changeState(ActivationState.DEACTIVATING);\n        // Reset reconnection timer just to be safe\n        this._nextReconnectDelay = 0;\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n            this._reconnector = undefined;\n        }\n        if (this._stompHandler &&\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\n            this.webSocket.readyState !== StompSocketState.CLOSED) {\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n            // we need to wait for the underlying websocket to close\n            retPromise = new Promise((resolve, reject) => {\n                // @ts-ignore - there is a _stompHandler\n                this._stompHandler.onWebSocketClose = evt => {\n                    origOnWebSocketClose(evt);\n                    resolve();\n                };\n            });\n        }\n        else {\n            // indicate that auto reconnect loop should terminate\n            this._changeState(ActivationState.INACTIVE);\n            return Promise.resolve();\n        }\n        if (force) {\n            this._stompHandler?.discardWebsocket();\n        }\n        else if (needToDispose) {\n            this._disposeStompHandler();\n        }\n        return retPromise;\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use `binaryBody` parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect\n     * if the message body has NULL octet(s) and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n        if (!this.connected) {\n            throw new TypeError('There is no underlying STOMP connection');\n        }\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use.\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     *  when the corresponding receipt has been received.\n     *\n     * The actual {@link IFrame} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\n     * received message with the {@link IMessage} as argument.\n     *\n     * Note: The library will generate a unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the `headers` argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map"],"names":["augmentWebsocket","webSocket","debug","noOp","ts","id","origOnClose","closeEvent","delay","BYTE","FrameImpl","params","command","headers","body","binaryBody","escapeHeaderValues","skipContentLengthHeader","rawFrame","trim","str","header","key","value","cmdAndHeaders","lines","name","s","uint8CmdAndHeaders","nullTerminator","uint8Frame","NULL","LF","CR","COLON","Parser","onFrame","onIncomingPing","segment","appendMissingNULLonIncoming","chunk","chunkWithNull","i","byte","contentLengthHeader","rawResult","StompSocketState","ActivationState","ReconnectionTimeMode","TickerStrategy","Ticker","_interval","_strategy","_debug","tick","message","startTime","Versions","versions","x","StompHandler","_client","_webSocket","config","frame","subscription","onReceive","client","messageId","callback","parser","evt","rawChunkAsString","errorEvent","connectHeaders","serverOutgoing","serverIncoming","v","ttl","delta","msg","rawChunk","out","disconnectHeaders","error","destination","hdrs","receiptId","transactionId","txId","subscriptionId","Client","state","conf","_activate","options","force","needToDispose","retPromise","origOnWebSocketClose","resolve","reject"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}